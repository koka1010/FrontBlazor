@page "/fuentesporindicador"
@using System.Collections.Generic
@using System.Text.Json
@using Services
@inherits ValidacionAcceso
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager

<h1 class="mb-4 text-primary">fuentes por indicador</h1>

<button class="btn btn-primary mb-3" @onclick="ToggleFormulario">
    @((mostrarFormulario ? "Cerrar formulario" : "Crear fuentes por indicador"))
</button>

@if (mostrarFormulario)
{
    <div class="card p-4 mb-4 shadow">
        <div class="row">
            <div class="col-md-6 mb-3">
                <label>Indicador</label>
                <select class="form-control" @bind="nuevoIndicador">
                    <option value="">Seleccione</option>
                    @foreach (var tipo in listaIndicador)
                    {
                       <option value="@(Convert.ToInt32(tipo["id"]?.ToString() ?? "0"))">@tipo["nombre"]?.ToString()</option>


                    }
                </select>
            </div>
            <div class="col-md-6 mb-3">
                <label>fuentes por indicador</label>
                <select class="form-control" @bind="nuevofuente">
                    <option value="">Seleccione</option>
                    @foreach (var tipo in listafuente)
                    {
                       <option value="@(Convert.ToInt32(tipo["id"]?.ToString() ?? "0"))">@tipo["nombre"]?.ToString()</option>

                    }
                </select>
            </div>
        </div>

        <button class="btn btn-success w-100 mt-3"
                @onclick="Crearfuentesporindicador"
                disabled="@(nuevoIndicador == 0 || nuevofuente == 0)">
            Crear fuentes por indicador
        </button>
    </div>
}

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else if (fuentesporindicadores == null || fuentesporindicadores.Count == 0)
{
    <p>No hay fuentes por indicador de indicadores disponibles.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered align-middle text-center">
            <thead>
                <tr>
                    <th>Indicador</th>
                    <th>fuentes por indicador</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var fuente in fuentesporindicadores)
                {
                    
                    var idfuenteStr = ObtenerValor(fuente, "fkidfuente");
                    var idIndicadorStr = ObtenerValor(fuente, "fkidindicador");

                    var idIndicador = int.TryParse(idIndicadorStr, out var tempInd) ? tempInd : -1;
                    var idfuente = int.TryParse(idfuenteStr, out var tempRep) ? tempRep : -1;

                    var objIndicador = listaIndicador.FirstOrDefault(i => int.Parse(i["id"].ToString()) == idIndicador);
                    var objfuente = listafuente.FirstOrDefault(r => int.Parse(r["id"].ToString()) == idfuente);

                    var nombreIndicador = objIndicador?["nombre"]?.ToString() ?? "N/A";
                    var nombrefuente = objfuente?["nombre"]?.ToString() ?? "N/A";

                    <tr>
                        <td>
                            @if (editandoIndicador == idIndicador)
                            {
                                <select class="form-control" @bind="indicadorEditado">
                                    @foreach (var tipo in listaIndicador)
                                    {
                                        <option value="@int.Parse(tipo["id"].ToString()!)">@tipo["nombre"]?.ToString()</option>
                                    }
                                </select>
                            }
                            else
                            {
                                @nombreIndicador
                            }
                        </td>
                        <td>
                            @if (editandoIndicador == idIndicador)
                            {
                                <select class="form-control" @bind="fuenteEditado">
                                    @foreach (var tipo in listafuente)
                                    {
                                        <option value="@int.Parse(tipo["id"].ToString()!)">@tipo["nombre"]?.ToString()</option>
                                    }
                                </select>
                            }
                            else
                            {
                                @nombrefuente
                            }
                        </td>
                        <td>
                            <div class="d-flex justify-content-center gap-2 flex-wrap">
                                @if (editandoIndicador == idIndicador)
                                {
                                    <button class="btn btn-sm btn-success" @onclick="() => GuardarEdicion()">
                                        <i class="bi bi-check2"></i> Guardar
                                    </button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicion">
                                        <i class="bi bi-x-lg"></i> Cancelar
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-primary" @onclick="() => EmpezarEdicion(idIndicador, idfuente)">
                                        <i class="bi bi-pencil-square"></i> Editar
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => Eliminarfuentesporindicador(idIndicador, idfuente)">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                }
                            </div>
                            </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}




@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> fuentesporindicadores  = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> listaIndicador = new();
    private List<Dictionary<string, object>> listafuente = new();
    private bool cargando = true;
    
    private string? errorMensaje = null;

    private int nuevofuente = 0;
    private int nuevoIndicador = 0;

    private int editandoIndicador = 0;
    private int editandofuente = 0;
    private int fuenteEditado = 0;
    private int indicadorEditado = 0;
    private bool mostrarFormulario = false;
    private void ToggleFormulario()
    {
        mostrarFormulario = !mostrarFormulario;
    }   

    protected override async Task OnInitializedAsync()
    {
        await Cargarfuentesporindicador();
        await CargarListasSelect();
    }

    private async Task Cargarfuentesporindicador()
    {
        cargando = true;
        errorMensaje = null;
        
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync("csharpapigenerica", "fuentesporindicador");
            
            if (resultado != null)
            {
                fuentesporindicadores  = resultado;
            }
            else
            {
                fuentesporindicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar los resultados del indicador: {ex.Message}";
            fuentesporindicadores = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarListasSelect()
    {
        listaIndicador = await servicioEntidad.ObtenerTodosAsync("csharpapigenerica", "indicador") ?? new List<Dictionary<string, object>>();
        listafuente = await servicioEntidad.ObtenerTodosAsync("csharpapigenerica", "fuente") ?? new List<Dictionary<string, object>>();
    }


    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario == null)
            return string.Empty;
            
        if (diccionario.TryGetValue(clave, out var valor))
        {
            return valor?.ToString() ?? string.Empty;
        }
        
        return string.Empty;
    }

    private async Task Crearfuentesporindicador()
{
    if (nuevoIndicador > 0 && nuevofuente > 0)
    {
        var nuevo = new Dictionary<string, object>
        {
            { "fkidindicador", nuevoIndicador },
            { "fkidfuente", nuevofuente },
        };

        var exito = await servicioEntidad.CrearAsync("csharpapigenerica", "fuentesporindicador", nuevo);
        if (exito)
        {
            await Cargarfuentesporindicador();
            nuevoIndicador = 0;
            nuevofuente = 0;
            errorMensaje = null;  
        }
        else
        {
            errorMensaje = "No se pudo crear el fuentes por indicador de indicador.";
        }
    }
    else
    {
        errorMensaje = "Debe seleccionar ambos campos.";
    }
}

        


    private void EmpezarEdicion(int indicadorActual, int fuenteActual)
    {
        editandoIndicador = indicadorActual;
        indicadorEditado = indicadorActual;
        fuenteEditado = fuenteActual;
        editandofuente = fuenteActual;

    }

    private void CancelarEdicion()
    {
    editandoIndicador = 0;
    editandofuente = 0;

    }

    private async Task GuardarEdicion()
    {
        try
        {
            var datos = new Dictionary<string, object?>
            {
                { "fkidfuente", fuenteEditado },
            };

            var clave = indicadorEditado.ToString() ?? "";

            var exito = await servicioEntidad.ActualizarAsync(
                "fuentesporindicador",                
                "fkidindicador",        
                clave,                  
                "usuario",             
                datos   
            );

            if (exito)
            {
                await Cargarfuentesporindicador();
                CancelarEdicion();
            }
            else
            {
                errorMensaje = "No se pudo actualizar el fuentes por indicador de indicador.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al actualizar: {ex.Message}";
        }
    }   


    private async Task Eliminarfuentesporindicador(int indicadorActual, int fuenteActual)
    {
        var clave = new Dictionary<string, object>
        {
            { "fkidindicador", indicadorActual },
            { "fkidfuente", fuenteActual }
        };

        var exito = await servicioEntidad.EliminarAsync("csharpapigenerica", "fuentesporindicador", "fkidindicador", indicadorActual.ToString());
        if (exito)
        {
            await Cargarfuentesporindicador();
        }
        else
        {
        errorMensaje = "No se pudo eliminar el fuentes por indicador de indicador.";
        }
    }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    }