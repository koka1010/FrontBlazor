@page "/resultado-indicador"
@using System.Collections.Generic  
@using System.Text.Json
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inherits ValidacionAcceso
<PageTitle>Lista de resultados indicador</PageTitle>

<h1 class="mb-4 text-primary">Resultados Indicador</h1>

<button class="btn btn-primary mb-3" @onclick="ToggleFormulario">
    @((mostrarFormulario ? "Cerrar formulario" : "Crear Resultado Indicador"))
</button>

@if (mostrarFormulario)
{
    <div class="card p-4 mb-4 shadow">
        <div class="row">
            <div class="col-md-6 mb-3">
                <label>Resultado</label>
                <input type="number" class="form-control" @bind="nuevoResultado" placeholder="Resultado" />
            </div>
            <div class="col-md-6 mb-3">
                <label>Fecha Calculo</label>
                <input type="date" class="form-control" @bind="nuevoFechaCalculo" placeholder="FechaCalculo" />
            </div>
            <div class="col-md-6 mb-3">
                <label>Indicador</label>
                <select class="form-control" @bind="nuevoIndicador">
                    <option value="">Seleccione</option>
                    @foreach (var tipo in listaIndicador)
                    {
                        <option value="@tipo["id"]?.ToString()">@tipo["nombre"]?.ToString()</option>
                    }
                </select>
            </div>    
        </div>

        <button class="btn btn-success w-100 mt-3" @onclick="CrearResultadoIndicador">Crear Resultado Indicador</button>
    </div>
}




@if (cargando)
{
    <p>Cargando...</p>
}
else if (resultadoIndicadores == null || resultadoIndicadores.Count == 0)
{
    <p>No hay resultados de indicadores disponibles.</p>
}
else
{
    <div class="table-responsive">
    <table class="table table-striped table-bordered align-middle text-center">
        <thead>
            <tr>
            <th>id</th>
            <th>Resultado</th>
            <th>FechaCalculo</th>
            <th>Indicador</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resultado in resultadoIndicadores)
            {
                var id = ObtenerValor(resultado, "id");
                var resultadoIndicador = ObtenerValor(resultado, "resultado");
                var fecha = ObtenerValor(resultado, "fechacalculo");
                var indicador = ObtenerValor(resultado, "fkidindicador");            
                <tr>
                    <!-- Muestra el ID del elemento -->
                    <td>@id</td>
                    <td>
                        @if (editandoId == id) // estamos editando este elemento específico
                        {
                            <!-- Muestra un input para editar el nombre -->
                            <input @bind="resultadoEditado" class="form-control" />
                        }
                        else
                        {
                            <!-- Muestra el nombre tal cual si no se está editando -->
                            @resultadoIndicador
                        }
                    </td>
                    <td>
                        @if (editandoId == id) // estamos editando este elemento específico
                        {
                            <!-- Muestra un input para editar el nombre -->
                            <input @bind="fechaEditado" class="form-control" />
                        }
                        else
                        {
                            <!-- Muestra el nombre tal cual si no se está editando -->
                            @fecha
                        }
                    </td>
                    <td>
                        @if (editandoId == id) // estamos editando este elemento específico
                        {
                            <!-- Muestra un input para editar el nombre -->
                            <input @bind="indicadorEditado" class="form-control" />
                        }
                        else
                        {
                            <!-- Muestra el nombre tal cual si no se está editando -->
                            @indicador
                        }
                    </td>
                    <td>
                        <div class="d-flex justify-content-center gap-2 flex-wrap">
                            @if (editandoId == id)
                            {
                                <button class="btn btn-sm btn-success" @onclick="() => GuardarEdicion(id)">
                                    <i class="bi bi-check2"></i> Guardar
                                </button>
                                <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicion">
                                    <i class="bi bi-x-lg"></i> Cancelar
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-primary" @onclick="() => EmpezarEdicion(id, double.Parse(resultadoIndicador), fecha, indicador)">
                                    <i class="bi bi-pencil-square"></i> Editar
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => EliminarIndicador(id)">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            }
                        </div>
                    </td>

                </tr>
                }
        </tbody>
    </table>
    </div>




@if (errorMensaje != null)
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> resultadoIndicadores = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> listaIndicador = new();
    private bool cargando = true;
    
    private string? errorMensaje = null;

    private double? nuevoResultado = 0;
    private DateTime nuevoFechaCalculo = DateTime.Now;
    private string nuevoIndicador = string.Empty;

    private string? editandoId = null;
    private double resultadoEditado = 0;
    private string fechaEditado = string.Empty;
    private string indicadorEditado = string.Empty;
    private bool mostrarFormulario = false;
    private void ToggleFormulario()
    {
        mostrarFormulario = !mostrarFormulario;
    }   

    // Constantes para la API
    private const string PROYECTO = "csharpapigenerica";
    private const string TABLA = "resultadoindicador";

    protected override async Task OnInitializedAsync()
    {
        await CargarIndicador();
        await CargarListasSelect();
    }

    // Cargar desde la API
    private async Task CargarIndicador()
    {
        cargando = true;
        errorMensaje = null;
        
        try
        {
            var resultado = await servicioEntidad.ObtenerTodosAsync(PROYECTO, TABLA);
            
            if (resultado != null)
            {
                resultadoIndicadores = resultado;
            }
            else
            {
                resultadoIndicadores = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar los resultados del indicador: {ex.Message}";
            resultadoIndicadores = new List<Dictionary<string, object>>();
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarListasSelect()
    {
        listaIndicador = await servicioEntidad.ObtenerTodosAsync(PROYECTO, "indicador") ?? new List<Dictionary<string, object>>();
    }


    // Obtener
    private string ObtenerValor(Dictionary<string, object> diccionario, string clave)
    {
        if (diccionario == null)
            return string.Empty;
            
        if (diccionario.TryGetValue(clave, out var valor))
        {
            return valor?.ToString() ?? string.Empty;
        }
        
        // Si clave no existe, retorna string vacío
        return string.Empty;
    }

    // Crear
    private async Task CrearResultadoIndicador()
    {
        if (nuevoResultado.HasValue && nuevoFechaCalculo != default && !string.IsNullOrWhiteSpace(nuevoIndicador))
        {
            var nuevoResultadoIndicador = new Dictionary<string, object>
        {
            { "resultado", nuevoResultado },
            { "fechacalculo", nuevoFechaCalculo },
            { "fkidindicador", nuevoIndicador},
        };

        // Servicio crear
        var exito = await servicioEntidad.CrearAsync(PROYECTO, TABLA, nuevoResultadoIndicador);
        if (exito)
        {
            await CargarIndicador(); // Refrescar tabla
            nuevoResultado = null;
        }
        else
        {
            errorMensaje = "No se pudo crear el resultado indicador.";
        }
    }
}

    // Iniciar edición
    private void EmpezarEdicion(string id, double resultadoActual, string fechaActual, string indicadorActual)
    {
        editandoId = id;
        resultadoEditado = resultadoActual;
        fechaEditado = fechaActual;
        indicadorEditado = indicadorActual;

    }

    // Cancelar edición
    private void CancelarEdicion()
    {
    editandoId = null;
    resultadoEditado = 0;
    fechaEditado = string.Empty;
    indicadorEditado = string.Empty;
    }

    // Actualizar
    private async Task GuardarEdicion(string id)
    {
        try
        {
            var datos = new Dictionary<string, object?>
        {
            { "resultado", resultadoEditado },
            { "fechacalculo", fechaEditado},
            { "fkidindicador", indicadorEditado},
        };

        // Servicio actualizar
        var exito = await servicioEntidad.ActualizarAsync(
            PROYECTO,
            TABLA,
            "id",
            id,
            datos
        );

        if (exito)
        {
            await CargarIndicador(); // Refrescar tabla
            CancelarEdicion();
        }
        else
        {
            errorMensaje = "No se pudo actualizar el resultado del indicador.";
        }
    }
    catch (Exception ex)
    {
        errorMensaje = $"Error al actualizar: {ex.Message}";
    }
}

    // Eliminar
    private async Task EliminarIndicador(string id)
    {
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar el  resultado del indicador con ID {id}?");
        if (confirmado)
        {
            var exito = await servicioEntidad.EliminarAsync(PROYECTO, TABLA, "id", id);
            if (exito)
            {
                await CargarIndicador(); // Refrescar tabla
            }
            else
            {
                errorMensaje = "No se pudo eliminar el resultado del indicador.";
            }
        }
    }

    // Mostrar confirmacion
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    }
}