@page "/Variable"
@using System.Collections.Generic
@using Services
@inject ServicioEntidad servicioEntidad
@inject NavigationManager navegacionManager
@inject IJSRuntime JSRuntime
@inherits ValidacionAcceso
<PageTitle>Lista Variable</PageTitle>

<h1 class="mb-4 text-primary">Variable</h1>

<div class="row mb-3">
    <div class="col-md-4">
        <button class="btn btn-primary w-100" @onclick="ToggleFormulario">
            @(mostrarFormulario ? "Cerrar formulario" : "Crear Variable")
        </button>
    </div>
    <div class="col-md-8">
        <input class="form-control" placeholder="Buscar por nombre..."
               @bind="filtroNombre" />
    </div>
</div>

@if (mostrarFormulario)
{
    <div class="card p-4 mb-4 shadow">
        <div class="row">
            <div class="col-md-6 mb-3">
                <label>Nombre</label>
                <input class="form-control" @bind="nuevoNombre" placeholder="Nombre" />
            </div>
            <div class="col-md-6 mb-3">
                <label>Fecha Creación</label>
                <input type="date" class="form-control" @bind="nuevoFechaCreacion" />
            </div>
            <div class="col-md-6 mb-3">
                <label>Usuario</label>
                <select class="form-control" @bind="nuevoUsuario">
                    <option value="">Seleccione</option>
                    @foreach (var u in listaUsuario)
                    {
                        <option value="@u["email"]">@u["email"]</option>
                    }
                </select>
            </div>
        </div>
        <button class="btn btn-success w-100 mt-3" @onclick="CrearVariable">
            Crear Variable
        </button>
    </div>
}

@if (cargando)
{
    <p><em>Cargando...</em></p>
}
else
{
    @* Aplica filtro por nombre *@
    var variablesFiltradas = variables
        .Where(v => string.IsNullOrEmpty(filtroNombre)
                 || ObtenerValor(v, "nombre")
                       .Contains(filtroNombre, StringComparison.OrdinalIgnoreCase))
        .ToList();

    @if (variablesFiltradas.Count == 0)
    {
        <p>No hay variables que coincidan con "<strong>@filtroNombre</strong>".</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered align-middle text-center">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Nombre</th>
                        <th>Fecha Creación</th>
                        <th>Usuario</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in variablesFiltradas)
                    {
                        var id = ObtenerValor(item, "id");
                        var nombre = ObtenerValor(item, "nombre");
                        var fecha = ObtenerValor(item, "fechacreacion");
                        var usuarioEmail  = ObtenerValor(item, "fkemailusuario");
                        var nombreUsuario = ObtenerNombreUsuario(usuarioEmail);

                        <tr>
                            <td>@id</td>
                            <td>
                                @if (editandoId == id)
                                {
                                    <input class="form-control" @bind="nombreEditado" />
                                }
                                else
                                {
                                    @nombre
                                }
                            </td>
                            <td>
                                @if (editandoId == id)
                                {
                                    <input type="date" class="form-control" @bind="fechaEditado" />
                                }
                                else
                                {
                                    @fecha
                                }
                            </td>
                            <td>
                                @if (editandoId == id)
                                {
                                    <select class="form-control" @bind="usuarioEditado">
                                        @foreach (var u in listaUsuario)
                                        {
                                            <option value="@u["email"]">@u["email"]</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    @nombreUsuario
                                }
                            </td>
                            <td>
                                <div class="d-flex justify-content-center gap-2 flex-wrap">
                                    @if (editandoId == id)
                                    {
                                        <button class="btn btn-sm btn-success"
                                                @onclick="() => GuardarEdicion(id)">
                                            <i class="bi bi-check2"></i> Guardar
                                        </button>
                                        <button class="btn btn-sm btn-secondary"
                                                @onclick="CancelarEdicion">
                                            <i class="bi bi-x-lg"></i> Cancelar
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-primary"
                                                @onclick="() => EmpezarEdicion(id, nombre, fecha, usuarioEmail)">
                                            <i class="bi bi-pencil-square"></i> Editar
                                        </button>
                                        <button class="btn btn-sm btn-danger"
                                                @onclick="() => EliminarVariable(id)">
                                            <i class="bi bi-trash"></i> Eliminar
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@if (!string.IsNullOrEmpty(errorMensaje))
{
    <div class="alert alert-danger">
        Error: @errorMensaje
    </div>
}

@code {
    private List<Dictionary<string, object>> variables   = new();
    private List<Dictionary<string, object>> listaUsuario = new();
    private bool cargando = true;
    private string? errorMensaje;

    // Crear
    private string nuevoNombre = string.Empty;
    private DateTime nuevoFechaCreacion = DateTime.Now;
    private string nuevoUsuario = string.Empty;

    // Editar
    private string? editandoId;
    private string nombreEditado = string.Empty;
    private DateTime fechaEditado = DateTime.Now;
    private string usuarioEditado = string.Empty;

    // Filtro
    private string filtroNombre = string.Empty;

    private bool mostrarFormulario = false;
    private void ToggleFormulario() => mostrarFormulario = !mostrarFormulario;

    protected override async Task OnInitializedAsync()
    {
        await CargarVariables();
        await CargarListasSelect();
    }

    private async Task CargarVariables()
    {
        cargando = true;
        errorMensaje = null;
        try
        {
            variables = await servicioEntidad.ObtenerTodosAsync("csharpapigenerica", "variable") ?? new();
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al cargar variables: {ex.Message}";
            variables = new();
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task CargarListasSelect()
    {
        listaUsuario = await servicioEntidad.ObtenerTodosAsync("csharpapigenerica", "usuario") ?? new();
    }

    private async Task CrearVariable()
    {
        if (string.IsNullOrWhiteSpace(nuevoNombre) || string.IsNullOrWhiteSpace(nuevoUsuario))
            return;

        var nuevo = new Dictionary<string, object?>
        {
            ["nombre"]         = nuevoNombre,
            ["fechacreacion"]  = nuevoFechaCreacion.ToString("yyyy-MM-dd"),
            ["fkemailusuario"] = nuevoUsuario
        };

        var exito = await servicioEntidad.CrearAsync("csharpapigenerica", "variable", nuevo);
        if (exito)
        {
            await CargarVariables();
            nuevoNombre = string.Empty;
            nuevoFechaCreacion = DateTime.Now;
            nuevoUsuario = string.Empty;
            mostrarFormulario = false;
        }
        else
        {
            errorMensaje = "No se pudo crear la variable.";
        }
    }

    private void EmpezarEdicion(string id, string nombre, string fecha, string usuarioEmail)
    {
        editandoId = id;
        nombreEditado = nombre;
        DateTime.TryParse(fecha, out fechaEditado);
        usuarioEditado = usuarioEmail;
    }

    private void CancelarEdicion()
    {
        editandoId = null;
        nombreEditado = string.Empty;
        fechaEditado = DateTime.Now;
        usuarioEditado = string.Empty;
    }

    private async Task GuardarEdicion(string id)
    {
        try
        {
            var datos = new Dictionary<string, object?>
            {
                ["nombre"]         = nombreEditado,
                ["fechacreacion"]  = fechaEditado.ToString("yyyy-MM-dd"),
                ["fkemailusuario"] = usuarioEditado
            };

            var exito = await servicioEntidad.ActualizarAsync("csharpapigenerica", "variable", "id", id, datos);
            if (exito)
            {
                await CargarVariables();
                CancelarEdicion();
            }
            else
            {
                errorMensaje = "No se pudo actualizar la variable.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = $"Error al actualizar: {ex.Message}";
        }
    }

    private async Task EliminarVariable(string id)
    {
        var confirmado = await JSRuntime.InvokeAsync<bool>(
            "confirm", $"¿Estás seguro de eliminar la variable con ID {id}?"
        );
        if (!confirmado) return;

        var exito = await servicioEntidad.EliminarAsync("csharpapigenerica", "variable", "id", id);
        if (exito)
            await CargarVariables();
        else
            errorMensaje = "No se pudo eliminar la variable.";
    }

    private string ObtenerValor(Dictionary<string, object> dic, string clave)
        => dic.TryGetValue(clave, out var v) ? v?.ToString() ?? "" : "";

    private string ObtenerNombreUsuario(string email)
    {
        var user = listaUsuario.FirstOrDefault(u => u["email"]?.ToString() == email);
        return user?["email"]?.ToString() ?? email;
    }
}